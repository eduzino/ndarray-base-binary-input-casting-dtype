{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar promoteDataTypes = require( '@stdlib/ndarray-base-promote-dtypes' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar DEFAULT_SIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.signed_integer' );\nvar DEFAULT_UNSIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.unsigned_integer' );\nvar DEFAULT_REAL_FLOATING_POINT_DTYPE = defaults.get( 'dtypes.real_floating_point' );\n\n\n// MAIN //\n\n/**\n* Resolves the casting data type for an input ndarray provided to a binary function.\n*\n* @param {string} idtype1 - input ndarray data type\n* @param {string} idtype2 - additional input ndarray data type\n* @param {string} odtype - output ndarray data type\n* @param {string} policy - input ndarray data type casting policy\n* @throws {TypeError} fourth argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} data type\n*\n* @example\n* var dt = resolve( 'float32', 'float32', 'float64', 'none' );\n* // returns <string>\n*/\nfunction resolve( idtype1, idtype2, odtype, policy ) {\n\tvar dt;\n\tif ( policy === 'none' ) {\n\t\t// When the policy is 'none', casting behavior is implementation-defined, so we just return the input ndarray data type as is...\n\t\treturn idtype1;\n\t}\n\tif ( policy === 'output' ) {\n\t\treturn odtype;\n\t}\n\tif ( policy === 'promoted' ) {\n\t\tdt = promoteDataTypes( [ idtype1, idtype2, odtype ] );\n\t\tif ( dt === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unable to promote the input and output data types. Input data types: [%s]. Output data type: %s.', join( [ idtype1, idtype2 ], ', ' ), odtype ) );\n\t\t}\n\t\treturn dt;\n\t}\n\tif ( policy === 'accumulation' ) {\n\t\t// When the casting policy is 'accumulation', we consider the input ndarray data type in isolation, irrespective of the output data type or the data types of additional input ndarrays...\n\n\t\t// If an input data type is floating-point, allow accumulation in that data type as overflow/underflow is handled naturally as a built-in feature of that data type...\n\t\tif ( isFloatingPointDataType( idtype1 ) || idtype1 === 'generic' ) { // NOTE: we may want to revisit this in the future for float16/complex32, where the value range is much more limited\n\t\t\treturn idtype1;\n\t\t}\n\t\t// Unless an input data type value range is larger than the default un/signed integer data type, accumulate in the default un/signed integer data type, as accumulating in smaller range integer data types (e.g., `int8`) are at high risk for overflow, especially for ndarrays containing many elements...\n\t\tif ( isUnsignedIntegerDataType( idtype1 ) ) {\n\t\t\treturn promoteDataTypes( [ idtype1, DEFAULT_UNSIGNED_INTEGER_DTYPE ] );\n\t\t}\n\t\tif ( isSignedIntegerDataType( idtype1 ) ) {\n\t\t\treturn promoteDataTypes( [ idtype1, DEFAULT_SIGNED_INTEGER_DTYPE ] );\n\t\t}\n\t\t// For all other input data types, accumulate in the default real-valued floating-point data type...\n\t\treturn DEFAULT_REAL_FLOATING_POINT_DTYPE;\n\t}\n\t// Check for an explicit data type...\n\tif ( isDataType( policy ) ) {\n\t\treturn policy;\n\t}\n\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported casting policy. Value: `%s`.', policy ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve the casting data type for an input ndarray provided to a binary function.\n*\n* @module @stdlib/ndarray-base-binary-input-casting-dtype\n*\n* @example\n* var resolve = require( '@stdlib/ndarray-base-binary-input-casting-dtype' );\n*\n* var dt = resolve( 'float64', 'float64', 'float64', 'none' );\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAA0B,QAAS,yDAA0D,EAC7FC,EAA0B,QAAS,yDAA0D,EAC7FC,EAA4B,QAAS,2DAA4D,EACjGC,EAAa,QAAS,0CAA2C,EACjEC,EAAmB,QAAS,qCAAsC,EAClEC,EAAW,QAAS,0BAA2B,EAC/CC,EAAO,QAAS,yBAA0B,EAC1CC,EAAS,QAAS,uBAAwB,EAK1CC,EAA+BH,EAAS,IAAK,uBAAwB,EACrEI,EAAiCJ,EAAS,IAAK,yBAA0B,EACzEK,EAAoCL,EAAS,IAAK,4BAA6B,EAoBnF,SAASM,EAASC,EAASC,EAASC,EAAQC,EAAS,CACpD,IAAIC,EACJ,GAAKD,IAAW,OAEf,OAAOH,EAER,GAAKG,IAAW,SACf,OAAOD,EAER,GAAKC,IAAW,WAAa,CAE5B,GADAC,EAAKZ,EAAkB,CAAEQ,EAASC,EAASC,CAAO,CAAE,EAC/CE,IAAO,KACX,MAAM,IAAI,MAAOT,EAAQ,sHAAuHD,EAAM,CAAEM,EAASC,CAAQ,EAAG,IAAK,EAAGC,CAAO,CAAE,EAE9L,OAAOE,CACR,CACA,GAAKD,IAAW,eAIf,OAAKf,EAAyBY,CAAQ,GAAKA,IAAY,UAC/CA,EAGHV,EAA2BU,CAAQ,EAChCR,EAAkB,CAAEQ,EAASH,CAA+B,CAAE,EAEjER,EAAyBW,CAAQ,EAC9BR,EAAkB,CAAEQ,EAASJ,CAA6B,CAAE,EAG7DE,EAGR,GAAKP,EAAYY,CAAO,EACvB,OAAOA,EAER,MAAM,IAAI,UAAWR,EAAQ,qFAAsFQ,CAAO,CAAE,CAC7H,CAKAhB,EAAO,QAAUY,ICnEjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFloatingPointDataType", "isSignedIntegerDataType", "isUnsignedIntegerDataType", "isDataType", "promoteDataTypes", "defaults", "join", "format", "DEFAULT_SIGNED_INTEGER_DTYPE", "DEFAULT_UNSIGNED_INTEGER_DTYPE", "DEFAULT_REAL_FLOATING_POINT_DTYPE", "resolve", "idtype1", "idtype2", "odtype", "policy", "dt", "main"]
}
